{
  "parser": "@typescript-eslint/parser",
  "parserOptions": {
    "project": "./tsconfig.json",
    "ecmaVersion": 2018,
    "sourceType": "module"
  },
  "extends": ["plugin:@typescript-eslint/recommended"],
  "plugins": ["@typescript-eslint"],
  "rules": {
    // Enforce T[] syntax for arrays over Array<T>.
    // https://typescript-eslint.io/rules/array-type
    "@typescript-eslint/array-type": [
      "error",
      {
        "default": "array"
      }
    ],

    // Enforce function return types.
    // https://typescript-eslint.io/rules/explicit-function-return-type
    "@typescript-eslint/explicit-function-return-type": [
      "error",
      {
        "allowExpressions": true,
        "allowHigherOrderFunctions": true,
        "allowTypedFunctionExpressions": true
      }
    ],

    // Enforce explicit return & argument types on exported functions & public class methods.
    // https://typescript-eslint.io/rules/explicit-module-boundary-types
    "@typescript-eslint/explicit-module-boundary-types": "error",

    // Disallow explicit type declarations for numbers, strings or booleans.
    // https://typescript-eslint.io/rules/no-inferrable-types
    "@typescript-eslint/no-inferrable-types": [
      "warn",
      {
        "ignoreParameters": true,
        "ignoreProperties": true
      }
    ],

    // Disallow explicit `any` types. Use `unknown` instead.
    // https://typescript-eslint.io/rules/no-explicit-any
    "@typescript-eslint/no-explicit-any": [
      "error",
      {
        "ignoreRestArgs": true
      }
    ],

    // Restrict use of labels and with statements.
    // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/with
    // https://eslint.org/docs/rules/no-restricted-syntax
    "no-restricted-syntax": [
      "error",
      {
        "selector": "LabeledStatement",
        "message": "Labels are a form of GOTO; using them makes code confusing and hard to maintain and understand."
      },
      {
        "selector": "WithStatement",
        "message": "`with` is disallowed in strict mode because it makes code impossible to predict and optimize."
      }
    ],

    // Disable using non-null assertions as they cancel the benefits of strict null-checking mode.
    // Prefer explicit null checks for safety.
    // https://typescript-eslint.io/rules/no-non-null-assertion
    "@typescript-eslint/no-non-null-assertion": "error",

    // Enforce no unused variables.
    // https://typescript-eslint.io/rules/no-unused-vars
    "no-unused-vars": "off",
    "@typescript-eslint/no-unused-vars": "error",

    // Warn against useless class constructors.
    // https://typescript-eslint.io/rules/no-useless-constructor
    "no-useless-constructor": "off",
    "@typescript-eslint/no-useless-constructor": "warn",

    // Restrict template expressions to allow for string & number types only.
    // Other types must be checked explicitly.
    // https://typescript-eslint.io/rules/restrict-template-expressions
    "@typescript-eslint/restrict-template-expressions": [
      "error",
      {
        "allowNumber": true,
        "allowBoolean": false,
        "allowAny": false,
        "allowNullish": false,
        "allowRegExp": false
      }
    ]
  }
}
